import java.util.regex.Matcher
import java.util.regex.Pattern

apply plugin: 'com.android.application'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    println("=================> rootProject.ext.currentFlavor: " + rootProject.ext.currentFlavor)
    rootProject.ext.currentFlavor = getCurrentFlavor()
    println("=================> rootProject.ext.currentFlavor: " + rootProject.ext.currentFlavor)
    println("=================> current: " + getCurrentFlavor())

    rootProject.ext.currentInfo = getFlavorInfo()
    rootProject.ext.currentInfo.each { data ->
        println("=================> key: " + data.key + "  value: " + getAttribute(data.key))
    }

    defaultConfig {
        println("=================> defaultConfig currentFlavor: " + rootProject.ext.currentFlavor)
        applicationId "com.cold.flavorsdemo"
        minSdkVersion 15
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    flavorDimensions "company", "version"

    signingConfigs {
        println("=================> signingConfigs currentFlavor: " + rootProject.ext.currentFlavor)
        test1 {
            storeFile file('../jks/test1.jks')
            storePassword "123456"
            keyAlias "key0"
            keyPassword "123456"
        }
        test2 {
            storeFile file('../jks/test2.jks')
            storePassword "123456"
            keyAlias "key0"
            keyPassword "123456"
        }
    }

    buildTypes {
        println("=================> buildTypes currentFlavor: " + rootProject.ext.currentFlavor)
        other {
            debuggable true
            jniDebuggable true
            zipAlignEnabled true
            minifyEnabled false
            shrinkResources false
            signingConfig null // 配置debug模式下的签名，在productFlavors里面配置
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
        }

        debug {
            debuggable true
            jniDebuggable true
            zipAlignEnabled true
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

    }

    productFlavors {
        println("=================> productFlavors currentFlavor: " + rootProject.ext.currentFlavor)
        c_vivo {
            dimension "company"
        }

        v_test1 {
            signingConfig signingConfigs.test1
            dimension "version"
        }

        v_test2 {
            signingConfig signingConfigs.test2
            dimension "version"
        }
    }

//    isDebug = true

    sourceSets {
        println("=================> sourceSets currentFlavor: " + rootProject.ext.currentFlavor)

        v_test1 {

        }

        v_test2 {

        }

        sourceSets.all { sourceSet ->
            if(rootProject.ext.isDebug) {
                manifest.srcFile 'src/flavor/debug/AndroidManifest.xml'
                java.srcDirs += ['src/flavor/debug/src']
                res.srcDirs += ['src/flavor/debug/res']
            } else {
                java.srcDirs += ['src/flavor/debug/src']
            }
        }
    }



}

def getAttribute(String key) {
    rootProject.ext.currentInfo.get(key)
}

def getFlavorInfo() {
    def name = getCurrentFlavor()
    println("=================> name: " + name)
    return rootProject.ext.productConfig.get(name)
}

def getCurrentFlavor() {
    Gradle gradle = getGradle()
    String  tskReqStr = gradle.getStartParameter().getTaskRequests().toString()

    Pattern pattern;
    println("=================> tskReqStr: " + tskReqStr)
    if( tskReqStr.contains( "assemble" ) )
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    else
        pattern = Pattern.compile("bundle(\\w+)(Release|Debug)")

    Matcher matcher = pattern.matcher( tskReqStr )

    if( matcher.find())
        return matcher.group(1).toLowerCase()
    else {
        println "NO MATCH FOUND"
        return "";
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
